@using LanguageSchool.Models
@model Student
@{
    ViewData["Title"] = "Create New Student";

    var AlertHidden = ViewBag.CreateSuccess == false ? "" : "d-none";
    var CPF_string = Model.CPF != "" ? string.Format("{0:000\\.000\\.000\\-00}", long.Parse(Model.CPF)) : "";
}

<div class="container mt-4">
    <h2> Create New Student</h2>

    <div class="alert alert-danger @AlertHidden" role="alert">
        Error creating student, please try again at a later time
    </div>
    @using (Html.BeginForm("SaveCreate", "Student", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="form-group">
            <label for="Name"> Student Name: </label>
            <input type="text" class="form-control" id="Name" name="Name" placeholder="Enter the student name" required value="@Model.Name" />
        </div>
        <div class="form-group mt-2">
            <label for="CPF"> CPF </label>
            <input type="text" class="form-control" id="CPF_Visible" name="CPF_Visible" placeholder="Enter the student CPF" required value="@CPF_string" maxlength="14" />
            <input type="text" class="form-control" id="CPF" name="CPF" required value="@Model.CPF" hidden />
        </div>

        <div class="form-group mt-2">
            <label for="DateOfBirth"> Date of Birth </label>
            <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" required value="@(Model.DateOfBirth == null ? "": Model.DateOfBirth.ToString("yyyy-MM-dd"))" />
        </div>
        <div class="form-group mt-2">
            <label for="ClassId"> Class </label>
            <select class="form-control" id="ClassId" name="ClassId" required>
                <option value="">Select an option</option>
                @foreach (Class Class in ViewBag.AvailableClasses)
                {
                    <option value="@Class.Id">@Class.Name - @Class.Code</option>
                }
            </select>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success">Save</button>
            <a href="/Student" class="btn btn-secondary">Cancel</a>
        </div>
    }
</div>

<script>
    document.getElementById("CPF_Visible").addEventListener("input", function () {
        const input = this;
        const rawValue = input.value.replace(/\D/g, ""); // Remove todos os caracteres não numéricos
        const maskedValue = rawValue
            .replace(/(\d{3})(\d)/, "$1.$2")
            .replace(/(\d{3})(\d)/, "$1.$2")
            .replace(/(\d{3})(\d{1,2})$/, "$1-$2"); // Aplica a máscara

        input.value = maskedValue; // Atualiza o valor visível
        document.getElementById("CPF").value = rawValue; // Atualiza o valor real
    });
</script>